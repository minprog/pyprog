name: oefen_bg
exam: true
buttons:
    Run doctest: |
        import <filename>
        import doctest
        doctest.testmod(<filename>)
    Run typecheck: |
        from mypy import api as mypy_api
        mypy_api.run(['--strict', '<filename>.py'])[0]
files:
    required:
        compreh.py: |
            # TODO
            # 1. Functie deelbaar
            # 2. Functie oeps
            # 3. Functie schreeuw
            # 4. Functie ketting (zie onder, staat al een template)
            
            def ketting(paren: list[list[int]]) -> list[list[int]]:
                """
                Geeft alle paren terug waarvoor het tweede getal in het paar gelijk is aan het
                eerste getal van het volgende paar.

                >>> ketting([[1, 2], [2, 3], [3, 4]])
                [[1, 2], [2, 3]]
                >>> ketting([[1, 7], [2, 3], [3, 4]])
                [[2, 3]]
                >>> ketting([[1, 2]])
                []
                """
        collect.py: |
            def emmeren(waardes: list[list[int]]) -> ...:
                """
                Maakt een dictionary met als key de lengte van iedere lijst en
                als value alle lijsten met die lengte.

                >>> emmeren([[1,2,3], [3,4], [4,5]])
                {3: [[1, 2, 3]], 2: [[3, 4], [4, 5]]}
                """
            
            def maak_overzicht(verkocht: list[tuple[int, int, int]]) -> ...:
                """
                Maakt een overzicht van verkochte frisdranken uit een frisdrankautomaat.
                Gegeven is een lijst met tuples, van verkopen per dag in de volgorde:
                     cola / sinas / limonade.
                De functie geeft de totale verkoop per type frisdrank in een dictionary.

                >>> maak_overzicht([(2, 3, 0), (3, 0, 0)])
                {'cola': 5, 'sinas': 3, 'limonade': 0}
                """
            
            def rits(getallen1: list[int], getallen2: list[int]) -> ...:
                """
                Ritst twee getallen-reeksen op positie aan elkaar. Getal pos 0 van de 
                ene reeks in een tuple met getal pos 0 van de andere reeks. Getallen worden 
                alleen overgenomen als ze -1, 0 of 1 verschillen.
                Geeft een list van tuples van paren getallen terug.

                >>> rits([1, 2, 3], [2, 4, 4])
                [(1, 2), (3, 4)]
                >>> rits([10, 30, 50, 70], [10, 20])
                [(10, 10)]
                >>> rits([5, 7, 9], [])
                []
                """
        dicerace.py: |
            if __name__ == '__main__':
                # create 3 new player objects
                players = [Player('Ali'), Player('Carmen'), Player('Jakub')]
                number_of_places = 10
    
                # create new game
                # the game should keep track of what player's turn it is
                # and also place them in the correct initial position
                game = DiceRace(players, number_of_places)

                while not game.is_done():
                    # print current board state
                    state_string = ""
                    for pos in range(number_of_places):
                        state_string += " "
                        # get initials for all players that are at position i
                        players_at_pos = [player.initial() for player in players
                                          if player.position == pos]
                        # either print those initials or "-" if no players are at position i
                        if len(players_at_pos) > 0:
                            state_string += "".join(players_at_pos)
                        else:
                            state_string += "-"
                    print(state_string)

                    # current player throws a die
                    die = random.randint(1, 6)
                    print(f"Current player {game.current_player_name()} throws die value:", die)
                    # move the current player, it should automatically advance to next player
                    game.play(die)
                    if game.is_done():
                        print(f"Game won by {game.winner_name()}!")
        oeber.py: ''
        klad.py: ''
